steps:
  # Get the commit short SHA
  - name: 'alpine'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        SHORT_SHA="$(cat /workspace/.git/refs/heads/* | head -c 7)"
        if [ -z "$SHORT_SHA" ]; then
          SHORT_SHA="latest"
        fi
        echo "_SHORT_SHA=$SHORT_SHA" >> /workspace/.env
    id: 'get-sha'

  # Build the container image
  - name: 'gcr.io/cloud-builders/docker'
    args: 
      - 'build'
      - '--build-arg'
      - 'SHORT_SHA=$_SHORT_SHA'
      - '-t'
      - 'gcr.io/$PROJECT_ID/task-manager-api:$_SHORT_SHA'
      - '.'
    id: 'build'

  # Push the container image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/task-manager-api:$_SHORT_SHA']
    id: 'push'

  # Deploy container image to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud run deploy task-manager-api \
          --image gcr.io/$PROJECT_ID/task-manager-api:$_SHORT_SHA \
          --region southamerica-east1 \
          --platform managed \
          --allow-unauthenticated \
          --port 8080 \
          --set-env-vars NODE_ENV=production \
          --update-secrets=JWT_SECRET=JWT_SECRET:latest
    secretEnv: ['JWT_SECRET']
    id: 'deploy'

# Images to store in Google Container Registry
images: ['gcr.io/$PROJECT_ID/task-manager-api:$_SHORT_SHA']

# Timeout for the build (10 minutes)
timeout: 600s

# Available secrets to access in build process
availableSecrets:
  secretManager:
  - versionName: projects/atom-be-node/secrets/JWT_SECRET/versions/latest
    env: 'JWT_SECRET'
